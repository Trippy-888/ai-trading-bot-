import os
import json
import logging
import requests
from datetime import datetime
from flask import Flask, request, jsonify

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# Telegram Bot Configuration - Your actual credentials
TELEGRAM_BOT_TOKEN = "7962012341:AAG1XJITypeyUkvo-K_2cM4cOqLa4c-Lx3s"
TELEGRAM_CHAT_ID = "8006606779"

def send_telegram_message(message):
    """Send message to Telegram bot"""
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
        payload = {
            'chat_id': TELEGRAM_CHAT_ID,
            'text': message
        }
        
        response = requests.post(url, json=payload, timeout=10)
        response.raise_for_status()
        
        logger.info(f"Telegram message sent successfully: {response.status_code}")
        return True
        
    except Exception as e:
        logger.error(f"Failed to send Telegram message: {str(e)}")
        return False

def format_trading_message(data):
    """Format trading signal data into Telegram message"""
    try:
        action = data.get('action', 'UNKNOWN').upper()
        ticker = data.get('ticker', 'UNKNOWN')
        price = data.get('price', 'N/A')
        timestamp = data.get('timestamp', datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC'))
        
        message = f"""üö® SMC AI SNIPER {action} SIGNAL üö®

üöÄ Ticker: {ticker}
üìà Entry: ${price}
‚è∞ Time: {timestamp}

Generated by SMC AI Sniper Alert Bot"""
        
        return message
        
    except Exception as e:
        logger.error(f"Error formatting message: {str(e)}")
        return f"üö® TRADING SIGNAL RECEIVED üö®\n\nAction: {action}\nTicker: {ticker}\nPrice: ${price}"

@app.route('/')
def index():
    """Simple status page"""
    return jsonify({
        'status': 'online',
        'service': 'SMC AI Sniper Alert Bot - TradingView to Telegram Webhook',
        'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')
    })

@app.route('/webhook', methods=['POST'])
def webhook():
    """Handle TradingView webhook alerts"""
    try:
        # Get the JSON data
        data = request.get_json()
        
        if not data:
            return jsonify({'status': 'error', 'message': 'No JSON data received'}), 400
        
        logger.info(f"Webhook received: {data}")
        
        # Format and send the message
        message = format_trading_message(data)
        success = send_telegram_message(message)
        
        if success:
            return jsonify({'status': 'success', 'message': 'Alert sent to Telegram successfully'}), 200
        else:
            return jsonify({'status': 'error', 'message': 'Failed to send alert to Telegram'}), 500
            
    except Exception as e:
        logger.error(f"Webhook error: {str(e)}")
        return jsonify({'status': 'error', 'message': f'Error: {str(e)}'}), 500

@app.route('/test')
def test():
    """Test endpoint to verify webhook functionality"""
    try:
        # Create test data
        test_data = {
            'action': 'BUY',
            'ticker': 'XAUUSD',
            'price': '2368.25',
            'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')
        }
        
        # Format and send test message
        message = format_trading_message(test_data)
        success = send_telegram_message(message)
        
        if success:
            return jsonify({
                'status': 'success',
                'message': 'Test alert sent to Telegram successfully',
                'data': test_data
            }), 200
        else:
            return jsonify({
                'status': 'error',
                'message': 'Failed to send test alert to Telegram'
            }), 500
            
    except Exception as e:
        logger.error(f"Test endpoint error: {str(e)}")
        return jsonify({'status': 'error', 'message': f'Test failed: {str(e)}'}), 500

@app.route('/status')
def status():
    """Health check endpoint"""
    return jsonify({
        'status': 'online',
        'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC'),
        'bot_configured': True,
        'chat_configured': True
    })

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port, debug=False)
